# https://github.com/Utkarsh87/md5-hashing/blob/master/md5.py

rotate_by = [7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22,
             5,  9, 14, 20, 5,  9, 14, 20, 5,  9, 14, 20, 5,  9, 14, 20,
             4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23,
             6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21]
constants = [3614090360, 3905402710, 606105819, 3250441966, 4118548399, 1200080426, 2821735955, 4249261313, 1770035416, 2336552879, 4294925233, 2304563134, 1804603682, 4254626195, 2792965006, 1236535329, 4129170786, 3225465664, 643717713, 3921069994, 3593408605, 38016083, 3634488961, 3889429448, 568446438, 3275163606, 4107603335, 1163531501, 2850285829, 4243563512, 1735328473, 2368359562, 4294588738, 2272392833, 1839030562, 4259657740, 2763975236, 1272893353, 4139469664, 3200236656, 681279174, 3936430074, 3572445317, 76029189, 3654602809, 3873151461, 530742520, 3299628645, 4096336452, 1126891415, 2878612391, 4237533241, 1700485571, 2399980690, 4293915773, 2240044497, 1873313359, 4264355552, 2734768916, 1309151649, 4149444226, 3174756917, 718787259, 3951481745]
init_MDBuffer = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476]

G_values = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1, 6, 11, 0, 5, 10, 15, 4, 9, 14, 3, 8, 13, 2, 7, 12, 5, 8, 11, 14, 1, 4, 7, 10, 13, 0, 3, 6, 9, 12, 15, 2, 0, 7, 14, 5, 12, 3, 10, 1, 8, 15, 6, 13, 4, 11, 2, 9]
hex_table = ['00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '0a', '0b', '0c', '0d', '0e', '0f', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '1a', '1b', '1c', '1d', '1e', '1f', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '2a', '2b', '2c', '2d', '2e', '2f', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '3a', '3b', '3c', '3d', '3e', '3f', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '4a', '4b', '4c', '4d', '4e', '4f', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '5a', '5b', '5c', '5d', '5e', '5f', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '6a', '6b', '6c', '6d', '6e', '6f', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '7a', '7b', '7c', '7d', '7e', '7f', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '8a', '8b', '8c', '8d', '8e', '8f', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '9a', '9b', '9c', '9d', '9e', '9f', 'a0', 'a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'a7', 'a8', 'a9', 'aa', 'ab', 'ac', 'ad', 'ae', 'af', 'b0', 'b1', 'b2', 'b3', 'b4', 'b5', 'b6', 'b7', 'b8', 'b9', 'ba', 'bb', 'bc', 'bd', 'be', 'bf', 'c0', 'c1', 'c2', 'c3', 'c4', 'c5', 'c6', 'c7', 'c8', 'c9', 'ca', 'cb', 'cc', 'cd', 'ce', 'cf', 'd0', 'd1', 'd2', 'd3', 'd4', 'd5', 'd6', 'd7', 'd8', 'd9', 'da', 'db', 'dc', 'dd', 'de', 'df', 'e0', 'e1', 'e2', 'e3', 'e4', 'e5', 'e6', 'e7', 'e8', 'e9', 'ea', 'eb', 'ec', 'ed', 'ee', 'ef', 'f0', 'f1', 'f2', 'f3', 'f4', 'f5', 'f6', 'f7', 'f8', 'f9', 'fa', 'fb', 'fc', 'fd', 'fe', 'ff']



@llvm
def leftRotate(x: int, amount: int) -> int:
    %tmp = mul i64 %x, 4294967297
    %shift_amount = sub i64 32, %amount
    %shifted = lshr i64 %tmp, %shift_amount
    ret i64 %shifted

@llvm
def _F(B: int, C: int, D: int) -> int:
    %notB = xor i64 %B, -1
    %B_and_C = and i64 %B, %C
    %notB_and_D = and i64 %notB, %D
    %result = or i64 %B_and_C, %notB_and_D
    ret i64 %result

@llvm
def _I(B: int, C: int, D: int) -> int:
    %not_b = xor i64 %B, -1
    %not_b_and_d = and i64 %not_b, %D
    %c_xor_not_b_and_d = xor i64 %C, %not_b_and_d
    %result = sub i64 -1, %c_xor_not_b_and_d

    ret i64 %result

@llvm
def _H(B: int, C: int, D: int) -> int:
    %b_xor_c = xor i64 %B, %C
    %result = xor i64 %D, %b_xor_c
    ret i64 %result
    
@llvm
def _G(B: int, C: int, D: int) -> int:
    %D_and_B = and i64 %D, %B
    %not_D = xor i64 %D, -1
    %not_D_and_C = and i64 %not_D, %C
    %G_result = add i64 %D_and_B, %not_D_and_C
    ret i64 %G_result

def list_to_hex(input_string: list) -> str:
    return ''.join([hex_table[c] for c in input_string])

def pad(msg):
    msglen = len(msg)
    msg_len_in_bits = (8 * msglen) & 0xFFFFFFFFFFFFFFFF
    msg.append(0x80)

    padding_size = ((55 - msglen)  & 0x3f)

    msg.extend([0] * padding_size)
    msg.extend([(msg_len_in_bits >> (i * 8)) & 0xFF for i in range(8)])

    msglen += padding_size + 9

    return msg, msglen

def process_block(block, state):
    X = __array__[int](16)

    A, B, C, D = state

    for k in range(16):
        X[k] = (block[4*k +3] << 24) | (block[4*k +2] << 16) | (block[4*k +1] << 8) | block[4*k]

    for i in range(64):
        if i < 16:
            F = _F(B, C, D)
        elif i < 32:
            F = _G(B, C, D)
        elif i < 48:
            F = _H(B, C, D)
        else:
            F = _I(B, C, D)

        G = G_values[i]
        
        to_rotate = A + F + constants[i] + X[G]
        to_rotate = to_rotate & 0xFFFFFFFF
        
        newB = (B + leftRotate(to_rotate, rotate_by[i])) & 0xFFFFFFFF
        A, B, C, D = D, newB, B, C

    state[0] = (state[0] + A) & 0xFFFFFFFF
    state[1] = (state[1] + B) & 0xFFFFFFFF
    state[2] = (state[2] + C) & 0xFFFFFFFF
    state[3] = (state[3] + D) & 0xFFFFFFFF

def md5(msg: str = '') -> str:
    init_temp = __array__[int](4)

    for x in range(4):
        init_temp[x] = init_MDBuffer[x]

    result = []

    msg, new_len = pad([ord(c) for c in msg])

    for offset in range(0, new_len, 64):
        process_block(msg[offset:offset+64], init_temp)

    for x in range(4):
        result += [init_temp[x] & 0xFF, (init_temp[x] >> 8) & 0xFF, (init_temp[x] >> 16) & 0xFF, (init_temp[x] >> 24) & 0xFF]
    
    return list_to_hex(result)

def test_brute():
    from C import rand() -> int

    NUM_HASHES = 1 << 32
    MAX_STRING_LENGTH = 100

    characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
    lchars = len(characters)

    PREFIX = "bed"
    lprefix = len(PREFIX)


    for _ in range(NUM_HASHES):
        length = rand() % MAX_STRING_LENGTH + 1
        random_string = ''.join(characters[rand() % lchars] for _ in range(length))
        
        md5_hash = md5(random_string)
        if md5_hash[:lprefix] == PREFIX:
            print("FOUND", random_string, md5_hash, PREFIX)

def test():
    assert md5() == "d41d8cd98f00b204e9800998ecf8427e", "null string"
    assert md5("\x00"*32) == "70bc8f4b72a86921468bf8e8441dce51", "null bytes"
    assert md5("helo") == "c3557ca22ada1ccafcc43f8013ef0251", "helo"
    assert md5("LONG"*1024) == "1d98d3d9d62bf4d3106da1915ec66915", "LONG"

    print("All tests passed")

if __name__ == "__main__":
    test()
