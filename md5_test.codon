# https://github.com/Utkarsh87/md5-hashing/blob/master/md5.py

rotate_by = [7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22,
			 5,  9, 14, 20, 5,  9, 14, 20, 5,  9, 14, 20, 5,  9, 14, 20,
			 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23,
			 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21]
constants = [3614090360, 3905402710, 606105819, 3250441966, 4118548399, 1200080426, 2821735955, 4249261313, 1770035416, 2336552879, 4294925233, 2304563134, 1804603682, 4254626195, 2792965006, 1236535329, 4129170786, 3225465664, 643717713, 3921069994, 3593408605, 38016083, 3634488961, 3889429448, 568446438, 3275163606, 4107603335, 1163531501, 2850285829, 4243563512, 1735328473, 2368359562, 4294588738, 2272392833, 1839030562, 4259657740, 2763975236, 1272893353, 4139469664, 3200236656, 681279174, 3936430074, 3572445317, 76029189, 3654602809, 3873151461, 530742520, 3299628645, 4096336452, 1126891415, 2878612391, 4237533241, 1700485571, 2399980690, 4293915773, 2240044497, 1873313359, 4264355552, 2734768916, 1309151649, 4149444226, 3174756917, 718787259, 3951481745]
init_MDBuffer = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476]

@llvm
def leftRotate(x: int, amount: int) -> int:
    %0 = and i64 %x, 4294967295
    %1 = shl i64 %0, %amount
    %2 = sub i64 32, %amount
    %3 = lshr i64 %0, %2
    %4 = or i64 %1, %3
    %5 = and i64 %4, 4294967295
    ret i64 %5

def string_to_hex(input_string): # :lemonthink
    return ''.join([hex(int(Ptr[u8](char.ptr)[0]))[2:].zfill(2) for char in input_string])

def pad(msg):
    msg_len_in_bits = (8 * len(msg)) & 0xFFFFFFFFFFFFFFFF
    msg.append(0x80)

    padding_size = 56 - len(msg) % 64
    
    if padding_size < 0:
        padding_size += 64

    msg.extend([0x0] * padding_size)
    msg.extend([(msg_len_in_bits >> (i * 8)) & 0xFF for i in range(8)])

    return msg

def processMessage(msg):
    init_temp = init_MDBuffer[:]

    for offset in range(0, len(msg), 64):
        A, B, C, D = init_temp

        block = msg[offset:offset+64]
        for i in range(64):
            if i < 16:
                F = (B & C) | (~B & D)
                G = i

            elif 16 <= i < 32:
                F = (D & B) | (~D & C)
                G = (5*i + 1) % 16

            elif 32 <= i < 48:
                F = B ^ C ^ D
                G = (3*i + 5) % 16

            elif 48 <= i < 64:
                F = C ^ (B | ~D)
                G = (7*i) % 16

            tb = block[4*G : 4*G + 4]
            to_rotate = A + F + constants[i] + ((tb[3] << 24) | (tb[2] << 16) | (tb[1] << 8) | tb[0])
            newB = (B + leftRotate(to_rotate, rotate_by[i])) & 0xFFFFFFFF

            A, B, C, D = D, newB, B, C

        init_temp[0] += A
        init_temp[0] &= 0xFFFFFFFF

        init_temp[1] += B
        init_temp[1] &= 0xFFFFFFFF

        init_temp[2] += C
        init_temp[2] &= 0xFFFFFFFF

        init_temp[3] += D
        init_temp[3] &= 0xFFFFFFFF

    return ''.join(
        chr(x & 0xFF) + \
            chr((x >> 8) & 0xFF) + \
                chr((x >> 16) & 0xFF) + \
                    chr((x >> 24) & 0xFF) for x in init_temp)
            
def md5(msg: str = ''):
	return string_to_hex(processMessage(pad([ord(x) for x in msg])))



def test_brute():
    from C import rand() -> int

    NUM_HASHES = 1 << 32
    MAX_STRING_LENGTH = 100

    characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
    lchars = len(characters)

    PREFIX = "bed"
    lprefix = len(PREFIX)


    for _ in range(NUM_HASHES):
        length = rand() % MAX_STRING_LENGTH + 1
        random_string = ''.join(characters[rand() % lchars] for _ in range(length))
        
        md5_hash = md5(random_string)
        if md5_hash[:lprefix] == PREFIX:
            print("FOUND", random_string, md5_hash, PREFIX)

def test():
    assert md5() == "d41d8cd98f00b204e9800998ecf8427e", "null string"
    assert md5("\x00"*32) == "70bc8f4b72a86921468bf8e8441dce51", "null bytes"
    assert md5("helo") == "c3557ca22ada1ccafcc43f8013ef0251", "helo"
    assert md5("LONG"*1024) == "1d98d3d9d62bf4d3106da1915ec66915", "LONG"

    print("All tests passed")

if __name__ == "__main__":
    test()